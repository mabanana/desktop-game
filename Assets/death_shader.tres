[gd_resource type="ShaderMaterial" load_steps=14 format=3 uid="uid://dgqejt3hesopc"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_sse80"]
constant = Color(0.53, 0.0954, 0.102643, 1)

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_bl1g8"]
operator = 4

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dylqv"]
input_name = "color"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_1lomb"]
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_kkh2q"]
default_input_values = [0, 0.0, 1, 0.2]
operator = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_rrq3x"]
default_input_values = [0, 0.0, 1, 1.5]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hjg01"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_0bdxp"]
function = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jua6v"]
default_input_values = [0, 0.0, 1, 10.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ba388"]
default_input_values = [0, 0.5, 1, 0.0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_n1f0k"]
input_name = "color"

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_vpvym"]
operator = 4

[sub_resource type="VisualShader" id="VisualShader_h23w4"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:8
	vec4 n_out8p0 = COLOR;


// Input:2
	float n_out2p0 = TIME;


// FloatOp:5
	float n_in5p1 = 10.00000;
	float n_out5p0 = n_out2p0 * n_in5p1;


// FloatFunc:3
	float n_out3p0 = sin(n_out5p0);


// FloatOp:6
	float n_in6p0 = 0.50000;
	float n_out6p0 = n_in6p0 + n_out3p0;


// ColorConstant:10
	vec4 n_out10p0 = vec4(0.530000, 0.095400, 0.102643, 1.000000);


	vec3 n_out11p0;
// ColorOp:11
	{
		float base = vec3(n_out6p0).x;
		float blend = vec3(n_out10p0.xyz).x;
		if (base < 0.5) {
			n_out11p0.x = 2.0 * base * blend;
		} else {
			n_out11p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out6p0).y;
		float blend = vec3(n_out10p0.xyz).y;
		if (base < 0.5) {
			n_out11p0.y = 2.0 * base * blend;
		} else {
			n_out11p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out6p0).z;
		float blend = vec3(n_out10p0.xyz).z;
		if (base < 0.5) {
			n_out11p0.z = 2.0 * base * blend;
		} else {
			n_out11p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


	vec3 n_out9p0;
// ColorOp:9
	{
		float base = vec3(n_out8p0.xyz).x;
		float blend = n_out11p0.x;
		if (base < 0.5) {
			n_out9p0.x = 2.0 * base * blend;
		} else {
			n_out9p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out8p0.xyz).y;
		float blend = n_out11p0.y;
		if (base < 0.5) {
			n_out9p0.y = 2.0 * base * blend;
		} else {
			n_out9p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out8p0.xyz).z;
		float blend = n_out11p0.z;
		if (base < 0.5) {
			n_out9p0.z = 2.0 * base * blend;
		} else {
			n_out9p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


// Input:12
	vec4 n_out12p0 = COLOR;


// FloatFunc:13
	float n_out13p0 = sin(n_out12p0.x);


// FloatOp:14
	float n_in14p1 = 0.20000;
	float n_out14p0 = n_out13p0 - n_in14p1;


// FloatOp:15
	float n_in15p1 = 1.50000;
	float n_out15p0 = n_out14p0 * n_in15p1;


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out15p0;


}
"
graph_offset = Vector2(-300.175, 132.647)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(440, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_hjg01")
nodes/fragment/2/position = Vector2(-720, 260)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatFunc_0bdxp")
nodes/fragment/3/position = Vector2(-440, 400)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatOp_jua6v")
nodes/fragment/5/position = Vector2(-420, 240)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatOp_ba388")
nodes/fragment/6/position = Vector2(-220, 320)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_n1f0k")
nodes/fragment/8/position = Vector2(-280, 140)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorOp_vpvym")
nodes/fragment/9/position = Vector2(220, 180)
nodes/fragment/10/node = SubResource("VisualShaderNodeColorConstant_sse80")
nodes/fragment/10/position = Vector2(-220, 220)
nodes/fragment/11/node = SubResource("VisualShaderNodeColorOp_bl1g8")
nodes/fragment/11/position = Vector2(0, 280)
nodes/fragment/12/node = SubResource("VisualShaderNodeInput_dylqv")
nodes/fragment/12/position = Vector2(-340, 520)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatFunc_1lomb")
nodes/fragment/13/position = Vector2(20, 500)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatOp_kkh2q")
nodes/fragment/14/position = Vector2(200, 460)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatOp_rrq3x")
nodes/fragment/15/position = Vector2(380, 460)
nodes/fragment/connections = PackedInt32Array(2, 0, 5, 0, 5, 0, 3, 0, 3, 0, 6, 1, 6, 0, 11, 0, 11, 0, 9, 1, 10, 0, 11, 1, 8, 0, 9, 0, 12, 0, 13, 0, 9, 0, 0, 0, 13, 0, 14, 0, 14, 0, 15, 0, 15, 0, 0, 1)

[resource]
shader = SubResource("VisualShader_h23w4")
